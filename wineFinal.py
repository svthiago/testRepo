import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import graphviz


from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn import tree
from sklearn.model_selection import train_test_split


from sklearn import metrics
from sklearn.model_selection import StratifiedKFold



def load_data():

    # SETTING COLUMN NAMES ON PANDAS AND SAVING THE CSV TO LOAD AT SNS

    df = pd.read_csv('wine.csv', sep=',')

    # Full Feature Names
    # wine.columns = ['Class','Alcohol', 'Malic acid', 'Ash', 'Alcalinity of ash', 'Magnesium',
    #                 'Total phenols', 'Flavanoids', 'Nonflavanoid phenols','Proanthocyanins',
    #                 'Color intensity', 'Hue', 'OD280/OD315 of diluted wines', 'Proline']

    # Simplified Feature Names
    df.columns = ['Class', 'Alc', 'mAcid', 'Ash', 'alcAsh', 'Magn',
                    'totPhen', 'Flav', 'nonFlavPhen', 'Proant',
                    'colorInt', 'Hue', 'OD280', 'Prol']

    features = ['Alc', 'mAcid', 'Ash', 'alcAsh', 'Magn',
                'totPhen', 'Flav', 'nonFlavPhen', 'Proant',
                'colorInt', 'Hue', 'OD280', 'Prol']

    return df


def check_basic_data_info(df):


    # Check for null values

    print("\nChecking for null values:")
    print(wine.isnull().sum())
    print("\n-----------------")


    # Check Basic Statistics

    print("\nChecking basic statistics")
    print(wine.describe())
    print("\n-----------------")

    # Get column Types

    print("\nCheck the column types")
    print(wine.dtypes)
    print("\n-----------------\n")

def pairplot(df):

    y = pd.Series(['wine_1', 'wine_2', 'wine_3'], index=[1, 2, 3])

    df['Class'] = df['Class'].map(y)

    allFeaturesPlot = sns.pairplot(df, hue='Class')
    plt.show()

    y = pd.Series([1, 2, 3], index=['wine_1', 'wine_2', 'wine_3'])

    wine['Class'] = wine['Class'].map(y)

def store_dataset_as_np(df):

    features = ['Alc', 'mAcid', 'Ash', 'alcAsh', 'Magn',
                'totPhen', 'Flav', 'nonFlavPhen', 'Proant',
                'colorInt', 'Hue', 'OD280', 'Prol']


    # Storing the features from the dataset as a numpy array

    x = df.loc[:, features].values

    y = df.loc[:, ['Class']].values

    return x, y




def main():
    # load the wine dataset as a csv
    wine = load_data()

    # check some basic statistcs, such as mean and standard deviation
    check_basic_data_info(wine)

    # PAIRPLOT OF THE RAW FEATURE DATASET
    pairplot(wine)

    x, y = store_dataset_as_np(wine)

    x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.4, random_state=0)

    # CLASSIFIER WITHOUT PCA

    decTree = tree.DecisionTreeClassifier()

    decTree = decTree.fit(x_train, y_train)

    print("The Decision Tree Accuracy without PCA is: %.2f" % decTree.score(x_test, y_test))

    # Normalizing the dataset before applying PCA
    x = StandardScaler().fit_transform(x)

    pca = PCA(n_components=2)
    # Applying PCA
    principalComponents = pca.fit_transform(x)
    # Now the dataset has only 2 components, that represents 2 ortogonal axis generated by a combination of the previous features

    x_train, x_test, y_train, y_test = train_test_split(principalComponents, y, test_size=0.4, random_state=0)

    # CLASSIFIER WITH PCA

    decTree = tree.DecisionTreeClassifier()

    decTree = decTree.fit(x_train, y_train)

    print("The Decision Tree Accuracy with PCA is: %.2f" % decTree.score(x_test, y_test))

    # transform the data into a pandas dataset to use in pairplot

    principalWine = pd.DataFrame(data=principalComponents, columns=['PC 1', 'PC 2'])

    principalWine = pd.concat([principalWine, wine[['Class']]], axis=1)

    pairplot(principalWine)


if __name__ == "__main__":
    main()